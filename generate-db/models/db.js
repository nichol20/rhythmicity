const fs = require("node:fs")
const path = require("node:path")
const { durationToMilliseconds, handleSpotifyMalformedDate } = require("../utils/conversion")

class Database {
    #addedArtistsLen = 0
    #addedAlbumsLen = 0
    #addedTracksLen = 0

    constructor() {
        this.dbPath = path.resolve(__dirname, "../data/app")
        fs.mkdirSync(this.dbPath, { recursive: true })

        const loadData = (fileName) => {
            const filePath = `${this.dbPath}/${fileName}.json`
            return fs.existsSync(filePath) ? require(filePath) : []
        }
        
        this.tracks = loadData('tracks')
        this.artists = loadData('artists')
        this.albums = loadData('albums')
        this.genres = loadData('genres')
        this.styles = loadData('styles')
    }

    save = async () => {
        try {
            const albumsStr = JSON.stringify(this.albums)
            const artistsStr = JSON.stringify(this.artists)
            const tracksStr = JSON.stringify(this.tracks)
            const genresStr = JSON.stringify(this.genres)
            const stylesStr = JSON.stringify(this.styles)
        
            await Promise.all([
                fs.promises.writeFile(`${this.dbPath}/tracks.json`, tracksStr),
                fs.promises.writeFile(`${this.dbPath}/artists.json`, artistsStr),
                fs.promises.writeFile(`${this.dbPath}/albums.json`, albumsStr),
                fs.promises.writeFile(`${this.dbPath}/genres.json`, genresStr),
                fs.promises.writeFile(`${this.dbPath}/styles.json`, stylesStr),
            ])

        } catch (error) {
            console.log(error.message)
            throw new Error('Error saving data.')
        }
    }

    findTrackBySpotifyId = trackSpotifyId => this.tracks.find(track => track.spotify.id === trackSpotifyId)

    findArtistBySpotifyId = artistSpotifyId => this.artists.find(artist => artist.spotify.id === artistSpotifyId)

    findAlbumBySpotifyId = albumSpotifyId => this.albums.find(album => album.spotify.id === albumSpotifyId)

    addTrack = ({ track, trackId, lyrics, artistIds, albumId, albumImages, videoData, genres, styles }) => {
        this.tracks.push({
            id: trackId, // id generated by code
            artistIds,
            albumId,
            genres, // genres generated by discogs api
            styles, // styles generated by discogs api
            explicit: track.explicit,
            playCount: 0,
            spotify: {
                id: track.id, // id generated by spotify
                title: track.name,
                popularity: track.popularity,
                durationMs: track.duration_ms,
                albumImages: albumImages
            },
            youtube: {
                id: videoData.id, // id generated by youtube
                title: videoData.snippet.title,
                durationMs: durationToMilliseconds(videoData.contentDetails.duration),
                publishedAt: videoData.snippet.publishedAt,
                statistics: videoData.statistics,
                thumbnails: videoData.snippet.thumbnails
            },
            lyrics,
            type: "track"
        })
        this.#addedTracksLen++
    }

    addArtist = ({ artist, artistId, genres, styles }) => {
        this.artists.push({
            id: artistId, // id generated by code
            name: artist.name,
            genres, // genres generated by discogs api
            styles, // styles generated by discogs api
            spotify: {
                id: artist.id, // id generated by spotify
                popularity: artist.popularity,
                images: artist.images
            },
            type: "artist"
        })
        this.#addedArtistsLen++
    }

    addAlbum = ({ album, albumId, trackId, artistIds, genres, styles }) => {
        this.albums.push({
            id: albumId, // id generated by code
            name: album.name,
            artistIds: artistIds,
            trackIds: [trackId],
            totalTracks: album.total_tracks,
            genres, // genres generated by discogs api
            styles, // styles generated by discogs api
            spotify: {
                id: album.id, // id generated by spotify
                popularity: album.popularity,
                images: album.images,
                releaseDate: handleSpotifyMalformedDate(album.release_date),
            },
            type: "album"
        })

        this.#addedAlbumsLen++
    }

    addGenres = (newGenres) => {
        this.genres = [...new Set(this.genres.concat(newGenres))]
    }

    addStyles = (newStyles) => {
        this.styles = [...new Set(this.styles.concat(newStyles))]
    }

    #updateItem = (itemId, itemList, update) => {
        return itemList.map(item => {
            if(item.id === itemId) {
                return update(item)
            }
    
            return item
        })
    }

    updateTrack = (trackId, update) => {
        this.tracks = this.#updateItem(trackId, this.tracks, update)
    }
    
    updateArtist = (artistId, update) => {
        this.artists = this.#updateItem(artistId, this.artists, update)
    }
    
    updateAlbum = (albumId, update) => {
        this.albums = this.#updateItem(albumId, this.albums, update)
    }

    getDataCount = () => {
        return {
            tracks: this.tracks.length,
            artists: this.artists.length,
            albums: this.albums.length,
        }
    }

    getCurrentRunDataCount = () => {
        return {
            tracks: this.#addedTracksLen,
            artists: this.#addedArtistsLen,
            albums: this.#addedAlbumsLen
        }
    }
}

module.exports = { Database }