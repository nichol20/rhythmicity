// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: track.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrackSpotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Popularity  uint32   `protobuf:"varint,3,opt,name=popularity,proto3" json:"popularity,omitempty"`
	DurationMs  uint32   `protobuf:"varint,4,opt,name=durationMs,proto3" json:"durationMs,omitempty"`
	AlbumImages []*Image `protobuf:"bytes,5,rep,name=albumImages,proto3" json:"albumImages,omitempty"`
}

func (x *TrackSpotify) Reset() {
	*x = TrackSpotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackSpotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSpotify) ProtoMessage() {}

func (x *TrackSpotify) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSpotify.ProtoReflect.Descriptor instead.
func (*TrackSpotify) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{0}
}

func (x *TrackSpotify) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrackSpotify) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TrackSpotify) GetPopularity() uint32 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *TrackSpotify) GetDurationMs() uint32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *TrackSpotify) GetAlbumImages() []*Image {
	if x != nil {
		return x.AlbumImages
	}
	return nil
}

type YoutubeThumbnails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default  *Image `protobuf:"bytes,1,opt,name=default,proto3,oneof" json:"default,omitempty"`
	Medium   *Image `protobuf:"bytes,2,opt,name=medium,proto3,oneof" json:"medium,omitempty"`
	High     *Image `protobuf:"bytes,3,opt,name=high,proto3,oneof" json:"high,omitempty"`
	Standard *Image `protobuf:"bytes,4,opt,name=standard,proto3,oneof" json:"standard,omitempty"`
	Maxres   *Image `protobuf:"bytes,5,opt,name=maxres,proto3,oneof" json:"maxres,omitempty"`
}

func (x *YoutubeThumbnails) Reset() {
	*x = YoutubeThumbnails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YoutubeThumbnails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YoutubeThumbnails) ProtoMessage() {}

func (x *YoutubeThumbnails) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YoutubeThumbnails.ProtoReflect.Descriptor instead.
func (*YoutubeThumbnails) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{1}
}

func (x *YoutubeThumbnails) GetDefault() *Image {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *YoutubeThumbnails) GetMedium() *Image {
	if x != nil {
		return x.Medium
	}
	return nil
}

func (x *YoutubeThumbnails) GetHigh() *Image {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *YoutubeThumbnails) GetStandard() *Image {
	if x != nil {
		return x.Standard
	}
	return nil
}

func (x *YoutubeThumbnails) GetMaxres() *Image {
	if x != nil {
		return x.Maxres
	}
	return nil
}

type YoutubeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewCount     string `protobuf:"bytes,1,opt,name=viewCount,proto3" json:"viewCount,omitempty"`
	LikeCount     string `protobuf:"bytes,2,opt,name=likeCount,proto3" json:"likeCount,omitempty"`
	FavoriteCount string `protobuf:"bytes,3,opt,name=favoriteCount,proto3" json:"favoriteCount,omitempty"`
	CommentCount  string `protobuf:"bytes,4,opt,name=commentCount,proto3" json:"commentCount,omitempty"`
}

func (x *YoutubeStatistics) Reset() {
	*x = YoutubeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YoutubeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YoutubeStatistics) ProtoMessage() {}

func (x *YoutubeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YoutubeStatistics.ProtoReflect.Descriptor instead.
func (*YoutubeStatistics) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{2}
}

func (x *YoutubeStatistics) GetViewCount() string {
	if x != nil {
		return x.ViewCount
	}
	return ""
}

func (x *YoutubeStatistics) GetLikeCount() string {
	if x != nil {
		return x.LikeCount
	}
	return ""
}

func (x *YoutubeStatistics) GetFavoriteCount() string {
	if x != nil {
		return x.FavoriteCount
	}
	return ""
}

func (x *YoutubeStatistics) GetCommentCount() string {
	if x != nil {
		return x.CommentCount
	}
	return ""
}

type Youtube struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string             `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	DurationMs  uint32             `protobuf:"varint,2,opt,name=durationMs,proto3" json:"durationMs,omitempty"`
	PublishedAt string             `protobuf:"bytes,3,opt,name=publishedAt,proto3" json:"publishedAt,omitempty"`
	Statistics  *YoutubeStatistics `protobuf:"bytes,4,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Thumbnails  *YoutubeThumbnails `protobuf:"bytes,5,opt,name=thumbnails,proto3" json:"thumbnails,omitempty"`
}

func (x *Youtube) Reset() {
	*x = Youtube{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Youtube) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Youtube) ProtoMessage() {}

func (x *Youtube) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Youtube.ProtoReflect.Descriptor instead.
func (*Youtube) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{3}
}

func (x *Youtube) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Youtube) GetDurationMs() uint32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *Youtube) GetPublishedAt() string {
	if x != nil {
		return x.PublishedAt
	}
	return ""
}

func (x *Youtube) GetStatistics() *YoutubeStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Youtube) GetThumbnails() *YoutubeThumbnails {
	if x != nil {
		return x.Thumbnails
	}
	return nil
}

type TrackMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Genres    []string            `protobuf:"bytes,2,rep,name=genres,proto3" json:"genres,omitempty"`
	Styles    []string            `protobuf:"bytes,3,rep,name=styles,proto3" json:"styles,omitempty"`
	Explicit  bool                `protobuf:"varint,4,opt,name=explicit,proto3" json:"explicit,omitempty"`
	PlayCount uint64              `protobuf:"varint,5,opt,name=playCount,proto3" json:"playCount,omitempty"`
	Spotify   *TrackSpotify       `protobuf:"bytes,6,opt,name=spotify,proto3" json:"spotify,omitempty"`
	Youtube   *Youtube            `protobuf:"bytes,7,opt,name=youtube,proto3" json:"youtube,omitempty"`
	Lyrics    string              `protobuf:"bytes,8,opt,name=lyrics,proto3" json:"lyrics,omitempty"`
	Album     *SimplifiedAlbum    `protobuf:"bytes,9,opt,name=album,proto3" json:"album,omitempty"`
	Artists   []*SimplifiedArtist `protobuf:"bytes,10,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *TrackMessage) Reset() {
	*x = TrackMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackMessage) ProtoMessage() {}

func (x *TrackMessage) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackMessage.ProtoReflect.Descriptor instead.
func (*TrackMessage) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{4}
}

func (x *TrackMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrackMessage) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *TrackMessage) GetStyles() []string {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *TrackMessage) GetExplicit() bool {
	if x != nil {
		return x.Explicit
	}
	return false
}

func (x *TrackMessage) GetPlayCount() uint64 {
	if x != nil {
		return x.PlayCount
	}
	return 0
}

func (x *TrackMessage) GetSpotify() *TrackSpotify {
	if x != nil {
		return x.Spotify
	}
	return nil
}

func (x *TrackMessage) GetYoutube() *Youtube {
	if x != nil {
		return x.Youtube
	}
	return nil
}

func (x *TrackMessage) GetLyrics() string {
	if x != nil {
		return x.Lyrics
	}
	return ""
}

func (x *TrackMessage) GetAlbum() *SimplifiedAlbum {
	if x != nil {
		return x.Album
	}
	return nil
}

func (x *TrackMessage) GetArtists() []*SimplifiedArtist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type PlaybackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YoutubeId string `protobuf:"bytes,1,opt,name=youtubeId,proto3" json:"youtubeId,omitempty"`
}

func (x *PlaybackResponse) Reset() {
	*x = PlaybackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaybackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaybackResponse) ProtoMessage() {}

func (x *PlaybackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaybackResponse.ProtoReflect.Descriptor instead.
func (*PlaybackResponse) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{5}
}

func (x *PlaybackResponse) GetYoutubeId() string {
	if x != nil {
		return x.YoutubeId
	}
	return ""
}

type GetPopularTracksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  *uint32 `protobuf:"varint,1,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset *uint32 `protobuf:"varint,2,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *GetPopularTracksRequest) Reset() {
	*x = GetPopularTracksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPopularTracksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopularTracksRequest) ProtoMessage() {}

func (x *GetPopularTracksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopularTracksRequest.ProtoReflect.Descriptor instead.
func (*GetPopularTracksRequest) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{6}
}

func (x *GetPopularTracksRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetPopularTracksRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type GetTracksByArtistIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Limit  *uint32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset *uint32 `protobuf:"varint,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *GetTracksByArtistIdRequest) Reset() {
	*x = GetTracksByArtistIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTracksByArtistIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTracksByArtistIdRequest) ProtoMessage() {}

func (x *GetTracksByArtistIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTracksByArtistIdRequest.ProtoReflect.Descriptor instead.
func (*GetTracksByArtistIdRequest) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{7}
}

func (x *GetTracksByArtistIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTracksByArtistIdRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetTracksByArtistIdRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type GetTracksByAlbumIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Limit  *uint32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset *uint32 `protobuf:"varint,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *GetTracksByAlbumIdRequest) Reset() {
	*x = GetTracksByAlbumIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTracksByAlbumIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTracksByAlbumIdRequest) ProtoMessage() {}

func (x *GetTracksByAlbumIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTracksByAlbumIdRequest.ProtoReflect.Descriptor instead.
func (*GetTracksByAlbumIdRequest) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{8}
}

func (x *GetTracksByAlbumIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTracksByAlbumIdRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetTracksByAlbumIdRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type MultipleTracks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks []*TrackMessage `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *MultipleTracks) Reset() {
	*x = MultipleTracks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleTracks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleTracks) ProtoMessage() {}

func (x *MultipleTracks) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleTracks.ProtoReflect.Descriptor instead.
func (*MultipleTracks) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{9}
}

func (x *MultipleTracks) GetTracks() []*TrackMessage {
	if x != nil {
		return x.Tracks
	}
	return nil
}

var File_track_proto protoreflect.FileDescriptor

var file_track_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x72,
	0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x01, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68,
	0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x11, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x68, 0x79, 0x74,
	0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72,
	0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x02, 0x52, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x48, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48,
	0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x61,
	0x78, 0x72, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xf3, 0x01, 0x0a, 0x07, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68,
	0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x47, 0x0a,
	0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x96, 0x03, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53,
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x37, 0x0a, 0x07, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x52,
	0x07, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x79, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x3b, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x40, 0x0a,
	0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x22,
	0x30, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x49,
	0x64, 0x22, 0x66, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x79, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x78, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x42, 0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4c,
	0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x3a, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x32, 0xe0, 0x04, 0x0a,
	0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x57, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x21, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x26, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x2d, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x22, 0x2e, 0x72, 0x68, 0x79, 0x74,
	0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x1a, 0x24, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68,
	0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x00,
	0x12, 0x6d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x00, 0x42,
	0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x69,
	0x63, 0x68, 0x6f, 0x6c, 0x32, 0x30, 0x2f, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_track_proto_rawDescOnce sync.Once
	file_track_proto_rawDescData = file_track_proto_rawDesc
)

func file_track_proto_rawDescGZIP() []byte {
	file_track_proto_rawDescOnce.Do(func() {
		file_track_proto_rawDescData = protoimpl.X.CompressGZIP(file_track_proto_rawDescData)
	})
	return file_track_proto_rawDescData
}

var file_track_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_track_proto_goTypes = []interface{}{
	(*TrackSpotify)(nil),               // 0: rhythmicity.main_api.TrackSpotify
	(*YoutubeThumbnails)(nil),          // 1: rhythmicity.main_api.YoutubeThumbnails
	(*YoutubeStatistics)(nil),          // 2: rhythmicity.main_api.YoutubeStatistics
	(*Youtube)(nil),                    // 3: rhythmicity.main_api.Youtube
	(*TrackMessage)(nil),               // 4: rhythmicity.main_api.TrackMessage
	(*PlaybackResponse)(nil),           // 5: rhythmicity.main_api.PlaybackResponse
	(*GetPopularTracksRequest)(nil),    // 6: rhythmicity.main_api.GetPopularTracksRequest
	(*GetTracksByArtistIdRequest)(nil), // 7: rhythmicity.main_api.GetTracksByArtistIdRequest
	(*GetTracksByAlbumIdRequest)(nil),  // 8: rhythmicity.main_api.GetTracksByAlbumIdRequest
	(*MultipleTracks)(nil),             // 9: rhythmicity.main_api.MultipleTracks
	(*Image)(nil),                      // 10: rhythmicity.main_api.Image
	(*SimplifiedAlbum)(nil),            // 11: rhythmicity.main_api.SimplifiedAlbum
	(*SimplifiedArtist)(nil),           // 12: rhythmicity.main_api.SimplifiedArtist
	(*RequestById)(nil),                // 13: rhythmicity.main_api.RequestById
	(*RequestByIds)(nil),               // 14: rhythmicity.main_api.RequestByIds
}
var file_track_proto_depIdxs = []int32{
	10, // 0: rhythmicity.main_api.TrackSpotify.albumImages:type_name -> rhythmicity.main_api.Image
	10, // 1: rhythmicity.main_api.YoutubeThumbnails.default:type_name -> rhythmicity.main_api.Image
	10, // 2: rhythmicity.main_api.YoutubeThumbnails.medium:type_name -> rhythmicity.main_api.Image
	10, // 3: rhythmicity.main_api.YoutubeThumbnails.high:type_name -> rhythmicity.main_api.Image
	10, // 4: rhythmicity.main_api.YoutubeThumbnails.standard:type_name -> rhythmicity.main_api.Image
	10, // 5: rhythmicity.main_api.YoutubeThumbnails.maxres:type_name -> rhythmicity.main_api.Image
	2,  // 6: rhythmicity.main_api.Youtube.statistics:type_name -> rhythmicity.main_api.YoutubeStatistics
	1,  // 7: rhythmicity.main_api.Youtube.thumbnails:type_name -> rhythmicity.main_api.YoutubeThumbnails
	0,  // 8: rhythmicity.main_api.TrackMessage.spotify:type_name -> rhythmicity.main_api.TrackSpotify
	3,  // 9: rhythmicity.main_api.TrackMessage.youtube:type_name -> rhythmicity.main_api.Youtube
	11, // 10: rhythmicity.main_api.TrackMessage.album:type_name -> rhythmicity.main_api.SimplifiedAlbum
	12, // 11: rhythmicity.main_api.TrackMessage.artists:type_name -> rhythmicity.main_api.SimplifiedArtist
	4,  // 12: rhythmicity.main_api.MultipleTracks.tracks:type_name -> rhythmicity.main_api.TrackMessage
	13, // 13: rhythmicity.main_api.Track.Playback:input_type -> rhythmicity.main_api.RequestById
	6,  // 14: rhythmicity.main_api.Track.GetPopularTracks:input_type -> rhythmicity.main_api.GetPopularTracksRequest
	13, // 15: rhythmicity.main_api.Track.GetTrack:input_type -> rhythmicity.main_api.RequestById
	14, // 16: rhythmicity.main_api.Track.GetSeveralTracks:input_type -> rhythmicity.main_api.RequestByIds
	7,  // 17: rhythmicity.main_api.Track.GetTracksByArtistId:input_type -> rhythmicity.main_api.GetTracksByArtistIdRequest
	8,  // 18: rhythmicity.main_api.Track.GetTracksByAlbumId:input_type -> rhythmicity.main_api.GetTracksByAlbumIdRequest
	5,  // 19: rhythmicity.main_api.Track.Playback:output_type -> rhythmicity.main_api.PlaybackResponse
	9,  // 20: rhythmicity.main_api.Track.GetPopularTracks:output_type -> rhythmicity.main_api.MultipleTracks
	4,  // 21: rhythmicity.main_api.Track.GetTrack:output_type -> rhythmicity.main_api.TrackMessage
	9,  // 22: rhythmicity.main_api.Track.GetSeveralTracks:output_type -> rhythmicity.main_api.MultipleTracks
	9,  // 23: rhythmicity.main_api.Track.GetTracksByArtistId:output_type -> rhythmicity.main_api.MultipleTracks
	9,  // 24: rhythmicity.main_api.Track.GetTracksByAlbumId:output_type -> rhythmicity.main_api.MultipleTracks
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_track_proto_init() }
func file_track_proto_init() {
	if File_track_proto != nil {
		return
	}
	file_common_proto_init()
	file_artist_proto_init()
	file_album_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_track_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackSpotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YoutubeThumbnails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YoutubeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Youtube); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaybackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPopularTracksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTracksByArtistIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTracksByAlbumIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleTracks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_track_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_track_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_track_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_track_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_track_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_track_proto_goTypes,
		DependencyIndexes: file_track_proto_depIdxs,
		MessageInfos:      file_track_proto_msgTypes,
	}.Build()
	File_track_proto = out.File
	file_track_proto_rawDesc = nil
	file_track_proto_goTypes = nil
	file_track_proto_depIdxs = nil
}
