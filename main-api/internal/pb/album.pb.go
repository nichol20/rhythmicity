// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: album.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlbumSpotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Popularity  uint32   `protobuf:"varint,2,opt,name=popularity,proto3" json:"popularity,omitempty"`
	Images      []*Image `protobuf:"bytes,3,rep,name=images,proto3" json:"images,omitempty"`
	ReleaseDate string   `protobuf:"bytes,4,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
}

func (x *AlbumSpotify) Reset() {
	*x = AlbumSpotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumSpotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumSpotify) ProtoMessage() {}

func (x *AlbumSpotify) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumSpotify.ProtoReflect.Descriptor instead.
func (*AlbumSpotify) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{0}
}

func (x *AlbumSpotify) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AlbumSpotify) GetPopularity() uint32 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *AlbumSpotify) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *AlbumSpotify) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

type AlbumMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Genres      []string            `protobuf:"bytes,3,rep,name=genres,proto3" json:"genres,omitempty"`
	Styles      []string            `protobuf:"bytes,4,rep,name=styles,proto3" json:"styles,omitempty"`
	TotalTracks uint32              `protobuf:"varint,5,opt,name=totalTracks,proto3" json:"totalTracks,omitempty"`
	Spotify     *AlbumSpotify       `protobuf:"bytes,6,opt,name=spotify,proto3" json:"spotify,omitempty"`
	Artists     []*SimplifiedArtist `protobuf:"bytes,7,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *AlbumMessage) Reset() {
	*x = AlbumMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumMessage) ProtoMessage() {}

func (x *AlbumMessage) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumMessage.ProtoReflect.Descriptor instead.
func (*AlbumMessage) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{1}
}

func (x *AlbumMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AlbumMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlbumMessage) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *AlbumMessage) GetStyles() []string {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *AlbumMessage) GetTotalTracks() uint32 {
	if x != nil {
		return x.TotalTracks
	}
	return 0
}

func (x *AlbumMessage) GetSpotify() *AlbumSpotify {
	if x != nil {
		return x.Spotify
	}
	return nil
}

func (x *AlbumMessage) GetArtists() []*SimplifiedArtist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type SimplifiedAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SimplifiedAlbum) Reset() {
	*x = SimplifiedAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimplifiedAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimplifiedAlbum) ProtoMessage() {}

func (x *SimplifiedAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimplifiedAlbum.ProtoReflect.Descriptor instead.
func (*SimplifiedAlbum) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{2}
}

func (x *SimplifiedAlbum) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SimplifiedAlbum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPopularAlbumsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  *uint32 `protobuf:"varint,1,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset *uint32 `protobuf:"varint,2,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *GetPopularAlbumsRequest) Reset() {
	*x = GetPopularAlbumsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPopularAlbumsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopularAlbumsRequest) ProtoMessage() {}

func (x *GetPopularAlbumsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopularAlbumsRequest.ProtoReflect.Descriptor instead.
func (*GetPopularAlbumsRequest) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{3}
}

func (x *GetPopularAlbumsRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetPopularAlbumsRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type MultipleAlbums struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Albums []*AlbumMessage `protobuf:"bytes,1,rep,name=albums,proto3" json:"albums,omitempty"`
}

func (x *MultipleAlbums) Reset() {
	*x = MultipleAlbums{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleAlbums) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleAlbums) ProtoMessage() {}

func (x *MultipleAlbums) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleAlbums.ProtoReflect.Descriptor instead.
func (*MultipleAlbums) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{4}
}

func (x *MultipleAlbums) GetAlbums() []*AlbumMessage {
	if x != nil {
		return x.Albums
	}
	return nil
}

var File_album_proto protoreflect.FileDescriptor

var file_album_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x72,
	0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x95, 0x01, 0x0a, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x33, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x0c, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x3c,
	0x0a, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x40, 0x0a, 0x07,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0x35,
	0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x72, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4c, 0x0a,
	0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12,
	0x3a, 0x0a, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x32, 0xe7, 0x03, 0x0a, 0x05,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x72, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x2d, 0x2e, 0x72, 0x68, 0x79, 0x74,
	0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68,
	0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x21, 0x2e, 0x72,
	0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x1a,
	0x22, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x68, 0x79, 0x74,
	0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x1a, 0x24, 0x2e,
	0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x42, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x72, 0x68, 0x79,
	0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x22, 0x2e,
	0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73,
	0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x72, 0x68, 0x79,
	0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x24, 0x2e,
	0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x73, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x69, 0x63, 0x68, 0x6f, 0x6c, 0x32, 0x30, 0x2f, 0x72, 0x68, 0x79,
	0x74, 0x68, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_album_proto_rawDescOnce sync.Once
	file_album_proto_rawDescData = file_album_proto_rawDesc
)

func file_album_proto_rawDescGZIP() []byte {
	file_album_proto_rawDescOnce.Do(func() {
		file_album_proto_rawDescData = protoimpl.X.CompressGZIP(file_album_proto_rawDescData)
	})
	return file_album_proto_rawDescData
}

var file_album_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_album_proto_goTypes = []interface{}{
	(*AlbumSpotify)(nil),            // 0: rhythmicity.main_api.AlbumSpotify
	(*AlbumMessage)(nil),            // 1: rhythmicity.main_api.AlbumMessage
	(*SimplifiedAlbum)(nil),         // 2: rhythmicity.main_api.SimplifiedAlbum
	(*GetPopularAlbumsRequest)(nil), // 3: rhythmicity.main_api.GetPopularAlbumsRequest
	(*MultipleAlbums)(nil),          // 4: rhythmicity.main_api.MultipleAlbums
	(*Image)(nil),                   // 5: rhythmicity.main_api.Image
	(*SimplifiedArtist)(nil),        // 6: rhythmicity.main_api.SimplifiedArtist
	(*RequestById)(nil),             // 7: rhythmicity.main_api.RequestById
	(*RequestByIds)(nil),            // 8: rhythmicity.main_api.RequestByIds
}
var file_album_proto_depIdxs = []int32{
	5, // 0: rhythmicity.main_api.AlbumSpotify.images:type_name -> rhythmicity.main_api.Image
	0, // 1: rhythmicity.main_api.AlbumMessage.spotify:type_name -> rhythmicity.main_api.AlbumSpotify
	6, // 2: rhythmicity.main_api.AlbumMessage.artists:type_name -> rhythmicity.main_api.SimplifiedArtist
	1, // 3: rhythmicity.main_api.MultipleAlbums.albums:type_name -> rhythmicity.main_api.AlbumMessage
	3, // 4: rhythmicity.main_api.Album.GetPopularAlbums:input_type -> rhythmicity.main_api.GetPopularAlbumsRequest
	7, // 5: rhythmicity.main_api.Album.GetAlbum:input_type -> rhythmicity.main_api.RequestById
	8, // 6: rhythmicity.main_api.Album.GetSeveralAlbums:input_type -> rhythmicity.main_api.RequestByIds
	7, // 7: rhythmicity.main_api.Album.GetAlbumByTrackId:input_type -> rhythmicity.main_api.RequestById
	7, // 8: rhythmicity.main_api.Album.GetAlbumsByArtistId:input_type -> rhythmicity.main_api.RequestById
	4, // 9: rhythmicity.main_api.Album.GetPopularAlbums:output_type -> rhythmicity.main_api.MultipleAlbums
	1, // 10: rhythmicity.main_api.Album.GetAlbum:output_type -> rhythmicity.main_api.AlbumMessage
	4, // 11: rhythmicity.main_api.Album.GetSeveralAlbums:output_type -> rhythmicity.main_api.MultipleAlbums
	1, // 12: rhythmicity.main_api.Album.GetAlbumByTrackId:output_type -> rhythmicity.main_api.AlbumMessage
	4, // 13: rhythmicity.main_api.Album.GetAlbumsByArtistId:output_type -> rhythmicity.main_api.MultipleAlbums
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_album_proto_init() }
func file_album_proto_init() {
	if File_album_proto != nil {
		return
	}
	file_common_proto_init()
	file_artist_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_album_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumSpotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimplifiedAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPopularAlbumsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleAlbums); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_album_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_album_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_album_proto_goTypes,
		DependencyIndexes: file_album_proto_depIdxs,
		MessageInfos:      file_album_proto_msgTypes,
	}.Build()
	File_album_proto = out.File
	file_album_proto_rawDesc = nil
	file_album_proto_goTypes = nil
	file_album_proto_depIdxs = nil
}
