// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: album_query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkIfAlbumExists = `-- name: CheckIfAlbumExists :one
SELECT EXISTS(SELECT 1 FROM albums WHERE id = $1) AS idExists
`

func (q *Queries) CheckIfAlbumExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfAlbumExists, id)
	var idexists bool
	err := row.Scan(&idexists)
	return idexists, err
}

const getAlbum = `-- name: GetAlbum :one
SELECT a.id albumId, a.name, a.totalTracks, a.spotifyId, sp.popularity spotifyPopularity, sp.releaseDate spotifyReleaseDate
FROM albums a
INNER JOIN album_data_spotify sp ON a.spotifyId = sp.id
WHERE a.id = $1
`

type GetAlbumRow struct {
	Albumid            uuid.UUID
	Name               string
	Totaltracks        int32
	Spotifyid          string
	Spotifypopularity  int32
	Spotifyreleasedate time.Time
}

func (q *Queries) GetAlbum(ctx context.Context, id uuid.UUID) (GetAlbumRow, error) {
	row := q.db.QueryRowContext(ctx, getAlbum, id)
	var i GetAlbumRow
	err := row.Scan(
		&i.Albumid,
		&i.Name,
		&i.Totaltracks,
		&i.Spotifyid,
		&i.Spotifypopularity,
		&i.Spotifyreleasedate,
	)
	return i, err
}

const getAlbumArtistIds = `-- name: GetAlbumArtistIds :many
SELECT artistId FROM artists_albums WHERE albumId = $1
`

func (q *Queries) GetAlbumArtistIds(ctx context.Context, albumid uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumArtistIds, albumid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var artistid uuid.UUID
		if err := rows.Scan(&artistid); err != nil {
			return nil, err
		}
		items = append(items, artistid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbumByTrackId = `-- name: GetAlbumByTrackId :one
SELECT a.id albumId, a.name, a.totalTracks, a.spotifyId, sp.popularity spotifyPopularity, sp.releaseDate spotifyReleaseDate
FROM tracks t
INNER JOIN albums a ON t.albumId = a.id
INNER JOIN album_data_spotify sp ON a.spotifyId = sp.id
WHERE t.id = $1
`

type GetAlbumByTrackIdRow struct {
	Albumid            uuid.UUID
	Name               string
	Totaltracks        int32
	Spotifyid          string
	Spotifypopularity  int32
	Spotifyreleasedate time.Time
}

func (q *Queries) GetAlbumByTrackId(ctx context.Context, id uuid.UUID) (GetAlbumByTrackIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAlbumByTrackId, id)
	var i GetAlbumByTrackIdRow
	err := row.Scan(
		&i.Albumid,
		&i.Name,
		&i.Totaltracks,
		&i.Spotifyid,
		&i.Spotifypopularity,
		&i.Spotifyreleasedate,
	)
	return i, err
}

const getAlbumGenres = `-- name: GetAlbumGenres :many
SELECT genre FROM albums_genres ag INNER JOIN genres g ON ag.genreId = g.id WHERE ag.albumId = $1
`

func (q *Queries) GetAlbumGenres(ctx context.Context, albumid uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumGenres, albumid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var genre string
		if err := rows.Scan(&genre); err != nil {
			return nil, err
		}
		items = append(items, genre)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbumSpotifyImages = `-- name: GetAlbumSpotifyImages :many
SELECT ip.url, ip.width, ip.height 
FROM albums a
INNER JOIN album_images_spotify ip ON ip.spotifyId = a.spotifyId
WHERE a.id = $1
`

type GetAlbumSpotifyImagesRow struct {
	Url    string
	Width  int32
	Height int32
}

func (q *Queries) GetAlbumSpotifyImages(ctx context.Context, id uuid.UUID) ([]GetAlbumSpotifyImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumSpotifyImages, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumSpotifyImagesRow
	for rows.Next() {
		var i GetAlbumSpotifyImagesRow
		if err := rows.Scan(&i.Url, &i.Width, &i.Height); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbumStyles = `-- name: GetAlbumStyles :many
SELECT style FROM albums_styles ast INNER JOIN styles s ON ast.styleId = s.id WHERE ast.albumId = $1
`

func (q *Queries) GetAlbumStyles(ctx context.Context, albumid uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumStyles, albumid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var style string
		if err := rows.Scan(&style); err != nil {
			return nil, err
		}
		items = append(items, style)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbumTrackIds = `-- name: GetAlbumTrackIds :many
SELECT id FROM tracks WHERE albumId = $1
`

func (q *Queries) GetAlbumTrackIds(ctx context.Context, albumid uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumTrackIds, albumid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbumsByArtistId = `-- name: GetAlbumsByArtistId :many
SELECT a.id albumId, a.name, a.totalTracks, a.spotifyId, sp.popularity spotifyPopularity, sp.releaseDate spotifyReleaseDate
FROM artists_albums aral
INNER JOIN albums a ON aral.albumId = a.id
INNER JOIN album_data_spotify sp ON a.spotifyId = sp.id
WHERE aral.artistId = $1
`

type GetAlbumsByArtistIdRow struct {
	Albumid            uuid.UUID
	Name               string
	Totaltracks        int32
	Spotifyid          string
	Spotifypopularity  int32
	Spotifyreleasedate time.Time
}

func (q *Queries) GetAlbumsByArtistId(ctx context.Context, artistid uuid.UUID) ([]GetAlbumsByArtistIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumsByArtistId, artistid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumsByArtistIdRow
	for rows.Next() {
		var i GetAlbumsByArtistIdRow
		if err := rows.Scan(
			&i.Albumid,
			&i.Name,
			&i.Totaltracks,
			&i.Spotifyid,
			&i.Spotifypopularity,
			&i.Spotifyreleasedate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPopularAlbums = `-- name: GetPopularAlbums :many
SELECT a.id albumId, a.name, a.totalTracks, a.spotifyId, sp.popularity spotifyPopularity, sp.releaseDate spotifyReleaseDate
FROM albums a
INNER JOIN album_data_spotify sp ON a.spotifyId = sp.id
ORDER BY sp.popularity DESC
LIMIT $1
`

type GetPopularAlbumsRow struct {
	Albumid            uuid.UUID
	Name               string
	Totaltracks        int32
	Spotifyid          string
	Spotifypopularity  int32
	Spotifyreleasedate time.Time
}

func (q *Queries) GetPopularAlbums(ctx context.Context, limit int32) ([]GetPopularAlbumsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPopularAlbums, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPopularAlbumsRow
	for rows.Next() {
		var i GetPopularAlbumsRow
		if err := rows.Scan(
			&i.Albumid,
			&i.Name,
			&i.Totaltracks,
			&i.Spotifyid,
			&i.Spotifypopularity,
			&i.Spotifyreleasedate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
