// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: artist.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Artist_GetPopularArtists_FullMethodName   = "/Artist/GetPopularArtists"
	Artist_GetArtist_FullMethodName           = "/Artist/GetArtist"
	Artist_GetSeveralArtists_FullMethodName   = "/Artist/GetSeveralArtists"
	Artist_GetArtistsByTrackId_FullMethodName = "/Artist/GetArtistsByTrackId"
	Artist_GetArtistsByAlbumId_FullMethodName = "/Artist/GetArtistsByAlbumId"
)

// ArtistClient is the client API for Artist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtistClient interface {
	GetPopularArtists(ctx context.Context, in *GetPopularArtistsRequest, opts ...grpc.CallOption) (*MultipleArtists, error)
	GetArtist(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ArtistMessage, error)
	GetSeveralArtists(ctx context.Context, in *RequestByIds, opts ...grpc.CallOption) (*MultipleArtists, error)
	GetArtistsByTrackId(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*MultipleArtists, error)
	GetArtistsByAlbumId(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*MultipleArtists, error)
}

type artistClient struct {
	cc grpc.ClientConnInterface
}

func NewArtistClient(cc grpc.ClientConnInterface) ArtistClient {
	return &artistClient{cc}
}

func (c *artistClient) GetPopularArtists(ctx context.Context, in *GetPopularArtistsRequest, opts ...grpc.CallOption) (*MultipleArtists, error) {
	out := new(MultipleArtists)
	err := c.cc.Invoke(ctx, Artist_GetPopularArtists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistClient) GetArtist(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ArtistMessage, error) {
	out := new(ArtistMessage)
	err := c.cc.Invoke(ctx, Artist_GetArtist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistClient) GetSeveralArtists(ctx context.Context, in *RequestByIds, opts ...grpc.CallOption) (*MultipleArtists, error) {
	out := new(MultipleArtists)
	err := c.cc.Invoke(ctx, Artist_GetSeveralArtists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistClient) GetArtistsByTrackId(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*MultipleArtists, error) {
	out := new(MultipleArtists)
	err := c.cc.Invoke(ctx, Artist_GetArtistsByTrackId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistClient) GetArtistsByAlbumId(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*MultipleArtists, error) {
	out := new(MultipleArtists)
	err := c.cc.Invoke(ctx, Artist_GetArtistsByAlbumId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtistServer is the server API for Artist service.
// All implementations must embed UnimplementedArtistServer
// for forward compatibility
type ArtistServer interface {
	GetPopularArtists(context.Context, *GetPopularArtistsRequest) (*MultipleArtists, error)
	GetArtist(context.Context, *RequestById) (*ArtistMessage, error)
	GetSeveralArtists(context.Context, *RequestByIds) (*MultipleArtists, error)
	GetArtistsByTrackId(context.Context, *RequestById) (*MultipleArtists, error)
	GetArtistsByAlbumId(context.Context, *RequestById) (*MultipleArtists, error)
	mustEmbedUnimplementedArtistServer()
}

// UnimplementedArtistServer must be embedded to have forward compatible implementations.
type UnimplementedArtistServer struct {
}

func (UnimplementedArtistServer) GetPopularArtists(context.Context, *GetPopularArtistsRequest) (*MultipleArtists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularArtists not implemented")
}
func (UnimplementedArtistServer) GetArtist(context.Context, *RequestById) (*ArtistMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtist not implemented")
}
func (UnimplementedArtistServer) GetSeveralArtists(context.Context, *RequestByIds) (*MultipleArtists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeveralArtists not implemented")
}
func (UnimplementedArtistServer) GetArtistsByTrackId(context.Context, *RequestById) (*MultipleArtists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistsByTrackId not implemented")
}
func (UnimplementedArtistServer) GetArtistsByAlbumId(context.Context, *RequestById) (*MultipleArtists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistsByAlbumId not implemented")
}
func (UnimplementedArtistServer) mustEmbedUnimplementedArtistServer() {}

// UnsafeArtistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtistServer will
// result in compilation errors.
type UnsafeArtistServer interface {
	mustEmbedUnimplementedArtistServer()
}

func RegisterArtistServer(s grpc.ServiceRegistrar, srv ArtistServer) {
	s.RegisterService(&Artist_ServiceDesc, srv)
}

func _Artist_GetPopularArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPopularArtistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServer).GetPopularArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Artist_GetPopularArtists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServer).GetPopularArtists(ctx, req.(*GetPopularArtistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artist_GetArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServer).GetArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Artist_GetArtist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServer).GetArtist(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artist_GetSeveralArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServer).GetSeveralArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Artist_GetSeveralArtists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServer).GetSeveralArtists(ctx, req.(*RequestByIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artist_GetArtistsByTrackId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServer).GetArtistsByTrackId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Artist_GetArtistsByTrackId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServer).GetArtistsByTrackId(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artist_GetArtistsByAlbumId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServer).GetArtistsByAlbumId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Artist_GetArtistsByAlbumId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServer).GetArtistsByAlbumId(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

// Artist_ServiceDesc is the grpc.ServiceDesc for Artist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Artist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Artist",
	HandlerType: (*ArtistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPopularArtists",
			Handler:    _Artist_GetPopularArtists_Handler,
		},
		{
			MethodName: "GetArtist",
			Handler:    _Artist_GetArtist_Handler,
		},
		{
			MethodName: "GetSeveralArtists",
			Handler:    _Artist_GetSeveralArtists_Handler,
		},
		{
			MethodName: "GetArtistsByTrackId",
			Handler:    _Artist_GetArtistsByTrackId_Handler,
		},
		{
			MethodName: "GetArtistsByAlbumId",
			Handler:    _Artist_GetArtistsByAlbumId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artist.proto",
}
